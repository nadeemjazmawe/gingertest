{
	"swagger": "2.0",
	"info": {
		"version": "v10.2",
		"title": "Product Order",
		"description": "This service manages product order resource, it allows retrival of product\norders with its items, their prices, total price, related party, notes,\nchannel, items ordered configuration. It allows to add, delete, modify items\nin order. it also allows to delete product order.\n",
		"license": {
			"name": "Amdocs Inc.",
			"url": "http://"
		},
		"contact": {
			"name": "Amdocs Inc.",
			"url": "http://www.amdocs.com",
			"email": "support@amdocs.com"
		}
	},
	"x-dox-DesignDocs": [
		{
			"description": "ProductOrdering\n",
			"url": "http://confluence/display/DEP/Product+Ordering+Management"
		}
	],
	"host": "amdocs.com:10101",
	"basePath": "/productOrdering/v2",
	"schemes": [
		"https"
	],
	"consumes": [
		"application/json"
	],
	"produces": [
		"application/json"
	],
	"paths": {
		"/productOrder": {
			"post": {
				"tags": [
					"ProductOrder"
				],
				"operationId": "createProductOrder",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"description": "This service creates product order with one or more items in order\n",
				"parameters": [
					{
						"$ref": "#/parameters/header-locale"
					},
					{
						"in": "body",
						"name": "ProductOrder",
						"description": "Create product order with 1 or more product order items.\n",
						"required": true,
						"schema": {
							"$ref": "#/definitions/ProductOrder"
						}
					}
				],
				"responses": {
					"201": {
						"description": "*Created* - product order got created successfully.\n",
						"schema": {
							"$ref": "#/definitions/ProductOrder"
						}
					},
					"400": {
						"$ref": "#/responses/400-BadRequest"
					},
					"409": {
						"$ref": "#/responses/409-Conflict"
					},
					"500": {
						"$ref": "#/responses/500-InternalServerError"
					},
					"502": {
						"$ref": "#/responses/502-BadGateway"
					},
					"default": {
						"$ref": "#/responses/500-InternalServerError"
					}
				}
			},
			"get": {
				"tags": [
					"ProductOrder"
				],
				"operationId": "getProductOrders",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"description": "This service retrieves a product orders\n",
				"parameters": [
					{
						"$ref": "#/parameters/header-locale"
					},
					{
						"$ref": "#/parameters/query-filter"
					},
					{
						"$ref": "#/parameters/query-order"
					},
					{
						"$ref": "#/parameters/query-state"
					},
					{
						"$ref": "#/parameters/query-channel"
					}
				],
				"responses": {
					"200": {
						"description": "*OK* - The product orders were retrieved successfully.\n",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/ProductOrder"
							}
						}
					},
					"400": {
						"$ref": "#/responses/400-BadRequest"
					},
					"409": {
						"$ref": "#/responses/409-Conflict"
					},
					"500": {
						"$ref": "#/responses/500-InternalServerError"
					},
					"502": {
						"$ref": "#/responses/502-BadGateway"
					},
					"default": {
						"$ref": "#/responses/500-InternalServerError"
					}
				}
			}
		},
		"/productOrder/{productOrderId}": {
			"get": {
				"tags": [
					"ProductOrder"
				],
				"operationId": "getProductOrder",
				"description": "This service retrieves a product order by it's id.\n",
				"parameters": [
					{
						"$ref": "#/parameters/header-locale"
					},
					{
						"$ref": "#/parameters/path-productOrderID"
					}
				],
				"responses": {
					"200": {
						"description": "*OK* - The product order was retrieved successfully.\n",
						"schema": {
							"$ref": "#/definitions/ProductOrder"
						}
					},
					"400": {
						"$ref": "#/responses/400-BadRequest"
					},
					"404": {
						"$ref": "#/responses/404-NotFound"
					},
					"409": {
						"$ref": "#/responses/409-Conflict"
					},
					"500": {
						"$ref": "#/responses/500-InternalServerError"
					},
					"default": {
						"$ref": "#/responses/500-InternalServerError"
					}
				}
			},
			"delete": {
				"tags": [
					"ProductOrder"
				],
				"operationId": "removeProductOrder",
				"description": "This operation removes ProductOrder resource.\n",
				"parameters": [
					{
						"$ref": "#/parameters/path-productOrderID"
					},
					{
						"$ref": "#/parameters/header-locale"
					},
					{
						"$ref": "#/parameters/header-If-Match"
					}
				],
				"responses": {
					"204": {
						"description": "*OK* - The ProductOrder was removed successfully.\n"
					},
					"400": {
						"$ref": "#/responses/400-BadRequest"
					},
					"404": {
						"$ref": "#/responses/404-NotFound"
					},
					"409": {
						"$ref": "#/responses/409-Conflict"
					},
					"500": {
						"$ref": "#/responses/500-InternalServerError"
					},
					"502": {
						"$ref": "#/responses/502-BadGateway"
					},
					"default": {
						"$ref": "#/responses/500-InternalServerError"
					}
				}
			},
			"patch": {
				"tags": [
					"ProductOrder"
				],
				"operationId": "patchProductOrder",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"description": "This service allows partial update product order resource it includes\nfields only at level of product order, no sub resouce should be updated\nusing patch.\n",
				"parameters": [
					{
						"$ref": "#/parameters/header-locale"
					},
					{
						"$ref": "#/parameters/path-productOrderID"
					},
					{
						"$ref": "#/parameters/header-If-Match"
					},
					{
						"in": "body",
						"name": "ProductOrderPatch",
						"description": "Patch request to update product order resource\n",
						"required": true,
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/PatchElement"
							}
						}
					}
				],
				"responses": {
					"200": {
						"description": "*OK* - Product order updated successfully.\n",
						"schema": {
							"$ref": "#/definitions/ProductOrder"
						}
					},
					"400": {
						"$ref": "#/responses/400-BadRequest"
					},
					"404": {
						"$ref": "#/responses/404-NotFound"
					},
					"409": {
						"$ref": "#/responses/409-Conflict"
					},
					"500": {
						"$ref": "#/responses/500-InternalServerError"
					},
					"502": {
						"$ref": "#/responses/502-BadGateway"
					},
					"default": {
						"$ref": "#/responses/500-InternalServerError"
					}
				}
			}
		},
		"/productOrder/{productOrderId}/cancel": {
			"post": {
				"tags": [
					"ProductOrder"
				],
				"operationId": "cancelProductOrder",
				"description": "Cancel Product Order, update the state of the Product Order to Canceled\n",
				"parameters": [
					{
						"$ref": "#/parameters/header-locale"
					},
					{
						"$ref": "#/parameters/path-productOrderID"
					},
					{
						"$ref": "#/parameters/header-If-Match"
					}
				],
				"responses": {
					"200": {
						"description": "*OK* - The product order was canceled successfully.\n",
						"schema": {
							"$ref": "#/definitions/ProductOrder"
						}
					},
					"400": {
						"$ref": "#/responses/400-BadRequest"
					},
					"404": {
						"$ref": "#/responses/404-NotFound"
					},
					"409": {
						"$ref": "#/responses/409-Conflict"
					},
					"500": {
						"$ref": "#/responses/500-InternalServerError"
					},
					"default": {
						"$ref": "#/responses/500-InternalServerError"
					}
				}
			}
		},
		"/productOrder/{productOrderId}/complete": {
			"post": {
				"tags": [
					"ProductOrder"
				],
				"operationId": "completeProductOrder",
				"description": "This service marks the (provided) Order Items as completed after it creates the (relevant) Products in Product Inventory domain. The associated Product Order is marked as completed after all the Order Items are marked as completed.\n",
				"parameters": [
					{
						"$ref": "#/parameters/header-locale"
					},
					{
						"$ref": "#/parameters/path-productOrderID"
					},
					{
						"$ref": "#/parameters/query-inventory-state"
					},
					{
						"in": "body",
						"name": "ProductOrder",
						"description": "The associated product order with the completed order items. Only the ProductOrder and OrderItem(s) identfiers are expected, any other value will be ignored.\n",
						"required": true,
						"schema": {
							"$ref": "#/definitions/ProductOrder"
						}
					}
				],
				"responses": {
					"200": {
						"description": "*OK* - The state of the product order items was set to Completed successfully.\n",
						"schema": {
							"$ref": "#/definitions/ProductOrder"
						}
					},
					"400": {
						"$ref": "#/responses/400-BadRequest"
					},
					"404": {
						"$ref": "#/responses/404-NotFound"
					},
					"409": {
						"$ref": "#/responses/409-Conflict"
					},
					"500": {
						"$ref": "#/responses/500-InternalServerError"
					},
					"default": {
						"$ref": "#/responses/500-InternalServerError"
					}
				}
			}
		},
		"/productOrder/{productOrderId}/orderItem/{orderItemId}/updateQuantity": {
			"post": {
				"tags": [
					"ProductOrder"
				],
				"operationId": "updateOrderItemQuantity",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"description": "This service update Order item quantity.\n",
				"parameters": [
					{
						"$ref": "#/parameters/header-locale"
					},
					{
						"$ref": "#/parameters/query-salesChannel"
					},
					{
						"$ref": "#/parameters/path-productOrderID"
					},
					{
						"$ref": "#/parameters/path-orderItemID"
					},
					{
						"$ref": "#/parameters/header-If-Match"
					},
					{
						"in": "body",
						"name": "UpdateOrderItem",
						"description": "Updated Order Item data.\n",
						"required": true,
						"schema": {
							"$ref": "#/definitions/PatchElement"
						}
					}
				],
				"responses": {
					"200": {
						"description": "*Ok* - Order Item was updated successfully.\n",
						"schema": {
							"$ref": "#/definitions/ProductOrder"
						}
					},
					"400": {
						"$ref": "#/responses/400-BadRequest"
					},
					"409": {
						"$ref": "#/responses/409-Conflict"
					},
					"500": {
						"$ref": "#/responses/500-InternalServerError"
					},
					"502": {
						"$ref": "#/responses/502-BadGateway"
					},
					"default": {
						"$ref": "#/responses/500-InternalServerError"
					}
				}
			}
		},
		"/productOrder/{productOrderId}/orderItem": {
			"post": {
				"tags": [
					"ProductOrder"
				],
				"operationId": "addOrderItem",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"description": "This service add Order item to ProductOrder.\n",
				"parameters": [
					{
						"$ref": "#/parameters/header-locale"
					},
					{
						"$ref": "#/parameters/path-productOrderID"
					},
					{
						"$ref": "#/parameters/header-If-Match"
					},
					{
						"in": "body",
						"name": "orderItem",
						"description": "Add Order Item data to ProductOrder.\n",
						"required": true,
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/OrderItem"
							}
						}
					}
				],
				"responses": {
					"200": {
						"description": "*Ok* - Order Item was Added successfully.\n",
						"schema": {
							"$ref": "#/definitions/ProductOrder"
						}
					},
					"400": {
						"$ref": "#/responses/400-BadRequest"
					},
					"409": {
						"$ref": "#/responses/409-Conflict"
					},
					"500": {
						"$ref": "#/responses/500-InternalServerError"
					},
					"502": {
						"$ref": "#/responses/502-BadGateway"
					},
					"default": {
						"$ref": "#/responses/500-InternalServerError"
					}
				}
			}
		},
		"/productOrder/{productOrderId}/addRelatedParty": {
			"post": {
				"tags": [
					"ProductOrder"
				],
				"operationId": "addRelatedParty",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"description": "This service adds related parties to ProductOrder.\n",
				"parameters": [
					{
						"$ref": "#/parameters/header-locale"
					},
					{
						"$ref": "#/parameters/path-productOrderID"
					},
					{
						"$ref": "#/parameters/header-If-Match"
					},
					{
						"in": "body",
						"name": "relatedParty",
						"description": "Add related parties to ProductOrder.\n",
						"required": true,
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/RelatedPartyRef"
							}
						}
					}
				],
				"responses": {
					"200": {
						"description": "*Ok* - Order Item was Added successfully.\n",
						"schema": {
							"$ref": "#/definitions/ProductOrder"
						}
					},
					"400": {
						"$ref": "#/responses/400-BadRequest"
					},
					"409": {
						"$ref": "#/responses/409-Conflict"
					},
					"500": {
						"$ref": "#/responses/500-InternalServerError"
					},
					"502": {
						"$ref": "#/responses/502-BadGateway"
					},
					"default": {
						"$ref": "#/responses/500-InternalServerError"
					}
				}
			}
		},
		"/productOrder/{productOrderId}/orderItem/{orderItemId}": {
			"get": {
				"tags": [
					"orderItem"
				],
				"operationId": "getOrderItem",
				"description": "This service retrieves a order Item by it's id.\n",
				"parameters": [
					{
						"$ref": "#/parameters/header-locale"
					},
					{
						"$ref": "#/parameters/path-productOrderID"
					},
					{
						"$ref": "#/parameters/path-orderItemID"
					}
				],
				"responses": {
					"200": {
						"description": "*OK* - The order item was retrieved successfully.\n",
						"schema": {
							"$ref": "#/definitions/ProductOrder"
						}
					},
					"400": {
						"$ref": "#/responses/400-BadRequest"
					},
					"404": {
						"$ref": "#/responses/404-NotFound"
					},
					"409": {
						"$ref": "#/responses/409-Conflict"
					},
					"500": {
						"$ref": "#/responses/500-InternalServerError"
					},
					"default": {
						"$ref": "#/responses/500-InternalServerError"
					}
				}
			},
			"delete": {
				"tags": [
					"ProductOrder"
				],
				"operationId": "removeOrderItem",
				"description": "This operation removes a orderItem from the ProductOrder resource.\n",
				"parameters": [
					{
						"$ref": "#/parameters/path-productOrderID"
					},
					{
						"$ref": "#/parameters/path-orderItemID"
					},
					{
						"$ref": "#/parameters/header-locale"
					},
					{
						"$ref": "#/parameters/header-If-Match"
					}
				],
				"responses": {
					"200": {
						"description": "*OK* - The orderItem was removed successfully.\n",
						"schema": {
							"$ref": "#/definitions/ProductOrder"
						}
					},
					"400": {
						"$ref": "#/responses/400-BadRequest"
					},
					"404": {
						"$ref": "#/responses/404-NotFound"
					},
					"409": {
						"$ref": "#/responses/409-Conflict"
					},
					"500": {
						"$ref": "#/responses/500-InternalServerError"
					},
					"502": {
						"$ref": "#/responses/502-BadGateway"
					},
					"default": {
						"$ref": "#/responses/500-InternalServerError"
					}
				}
			}
		},
		"/productOrder/{productOrderId}/orderItem/{orderItemId}/cancel": {
			"post": {
				"tags": [
					"orderItem"
				],
				"operationId": "cancelOrderItem",
				"description": "Cancel Product Order Item , update the state of the Product Order Item to Canceled\n",
				"parameters": [
					{
						"$ref": "#/parameters/header-locale"
					},
					{
						"$ref": "#/parameters/path-productOrderID"
					},
					{
						"$ref": "#/parameters/path-orderItemID"
					},
					{
						"$ref": "#/parameters/header-If-Match"
					}
				],
				"responses": {
					"200": {
						"description": "*OK* - The order item was canceled successfully.\n",
						"schema": {
							"$ref": "#/definitions/ProductOrder"
						}
					},
					"400": {
						"$ref": "#/responses/400-BadRequest"
					},
					"404": {
						"$ref": "#/responses/404-NotFound"
					},
					"409": {
						"$ref": "#/responses/409-Conflict"
					},
					"500": {
						"$ref": "#/responses/500-InternalServerError"
					},
					"default": {
						"$ref": "#/responses/500-InternalServerError"
					}
				}
			}
		},
		"/productOrder/{productOrderId}/manageRelatedParty": {
			"post": {
				"tags": [
					"ProductOrder"
				],
				"operationId": "manageProductOrderRelatedParty",
				"description": "This service associates a related party on Product Order.\n",
				"parameters": [
					{
						"$ref": "#/parameters/header-locale"
					},
					{
						"$ref": "#/parameters/path-productOrderID"
					},
					{
						"$ref": "#/parameters/query-relatedPartyID"
					},
					{
						"$ref": "#/parameters/query-role"
					},
					{
						"$ref": "#/parameters/query-action"
					},
					{
						"$ref": "#/parameters/header-If-Match"
					},
					{
						"in": "body",
						"name": "RelatedPartyRef",
						"description": "The associated Related Party to the product order. Required in case query action is 'add' or 'replace'\n",
						"required": false,
						"schema": {
							"$ref": "#/definitions/RelatedPartyRef"
						}
					}
				],
				"responses": {
					"200": {
						"description": "*OK* - The related party was updated successfully.\n",
						"schema": {
							"$ref": "#/definitions/ProductOrder"
						}
					},
					"400": {
						"$ref": "#/responses/400-BadRequest"
					},
					"404": {
						"$ref": "#/responses/404-NotFound"
					},
					"409": {
						"$ref": "#/responses/409-Conflict"
					},
					"412": {
						"$ref": "#/responses/412-PreconditionFailed"
					},
					"500": {
						"$ref": "#/responses/500-InternalServerError"
					},
					"default": {
						"$ref": "#/responses/500-InternalServerError"
					}
				}
			}
		},
		"/productOrder/{productOrderId}/orderItem/{orderItemId}/manageRelatedParty": {
			"post": {
				"tags": [
					"OrderItem"
				],
				"operationId": "manageOrderItemRelatedParty",
				"description": "This service manages association of a related party on Order Item.\n",
				"parameters": [
					{
						"$ref": "#/parameters/header-locale"
					},
					{
						"$ref": "#/parameters/path-productOrderID"
					},
					{
						"$ref": "#/parameters/path-orderItemID"
					},
					{
						"$ref": "#/parameters/query-nestedOrderItemID"
					},
					{
						"$ref": "#/parameters/query-relatedPartyID"
					},
					{
						"$ref": "#/parameters/query-role"
					},
					{
						"$ref": "#/parameters/query-action"
					},
					{
						"$ref": "#/parameters/header-If-Match"
					},
					{
						"in": "body",
						"name": "RelatedPartyRef",
						"description": "The associated Related Party to the order item. Required in case query action is 'add' or 'replace'\n",
						"required": false,
						"schema": {
							"$ref": "#/definitions/RelatedPartyRef"
						}
					}
				],
				"responses": {
					"200": {
						"description": "*OK* - The related party was updated successfully.\n",
						"schema": {
							"$ref": "#/definitions/ProductOrder"
						}
					},
					"400": {
						"$ref": "#/responses/400-BadRequest"
					},
					"404": {
						"$ref": "#/responses/404-NotFound"
					},
					"409": {
						"$ref": "#/responses/409-Conflict"
					},
					"412": {
						"$ref": "#/responses/412-PreconditionFailed"
					},
					"500": {
						"$ref": "#/responses/500-InternalServerError"
					},
					"default": {
						"$ref": "#/responses/500-InternalServerError"
					}
				}
			}
		},
		"/productOrder/{productOrderId}/manageBillingAccount": {
			"post": {
				"tags": [
					"ProductOrder"
				],
				"operationId": "manageBillingAccountRelation",
				"description": "The Task that handles charge distribution feature by manages the Billing Account relation on any supported entity under the Order. Supported entities that can get association to a Billing Account are: ProductOrder (TBD), Order item (root/nested), Order Item Price\n",
				"parameters": [
					{
						"$ref": "#/parameters/header-locale"
					},
					{
						"$ref": "#/parameters/path-productOrderID"
					},
					{
						"$ref": "#/parameters/header-If-Match"
					},
					{
						"in": "body",
						"name": "OrderBillingAccountRelation",
						"description": "The request for associating a Billing Account relation  on relevant entity in the Product Order\n",
						"required": true,
						"schema": {
							"$ref": "#/definitions/OrderBillingAccountRelation"
						}
					}
				],
				"responses": {
					"200": {
						"description": "*OK* - The billing account relation was updated successfully.\n",
						"schema": {
							"$ref": "#/definitions/ProductOrder"
						}
					},
					"400": {
						"$ref": "#/responses/400-BadRequest"
					},
					"404": {
						"$ref": "#/responses/404-NotFound"
					},
					"409": {
						"$ref": "#/responses/409-Conflict"
					},
					"412": {
						"$ref": "#/responses/412-PreconditionFailed"
					},
					"500": {
						"$ref": "#/responses/500-InternalServerError"
					},
					"default": {
						"$ref": "#/responses/500-InternalServerError"
					}
				}
			}
		}
	},
	"parameters": {
		"header-locale": {
			"name": "Accept-Language",
			"in": "header",
			"description": "client's locale\n",
			"type": "string"
		},
		"query-salesChannel": {
			"name": "salesChannel",
			"in": "query",
			"description": "Sales Channel\n",
			"type": "string"
		},
		"query-orderItemID": {
			"name": "orderItemId",
			"in": "query",
			"description": "Order Item identifier\n",
			"required": false,
			"type": "array",
			"items": {
				"type": "string",
				"collectionFormat": "csv",
				"minLength": 1
			}
		},
		"query-nestedOrderItemID": {
			"name": "nestedOrderItemId",
			"in": "query",
			"description": "Nested Order Item identifier\n",
			"required": false,
			"type": "array",
			"items": {
				"type": "string",
				"collectionFormat": "csv",
				"minLength": 1
			}
		},
		"query-action": {
			"name": "action",
			"in": "query",
			"description": "Action to be performed: add, replace,remove\n",
			"required": true,
			"type": "string"
		},
		"path-productOrderID": {
			"name": "productOrderId",
			"in": "path",
			"description": "product order id\n",
			"required": true,
			"type": "string"
		},
		"query-start": {
			"name": "start",
			"in": "query",
			"description": "Requested paginated start index \n",
			"required": false,
			"type": "integer"
		},
		"query-pageSize": {
			"name": "pageSize",
			"in": "query",
			"description": "Requested paginated max number of results per page \n",
			"required": false,
			"type": "integer"
		},
		"path-orderItemID": {
			"name": "orderItemId",
			"in": "path",
			"description": "Order Item ID\n",
			"required": true,
			"type": "string"
		},
		"header-If-Match": {
			"name": "If-Match",
			"required": true,
			"in": "header",
			"type": "string"
		},
		"query-filter": {
			"x-dox-Since": "v10.2",
			"name": "filter",
			"in": "query",
			"description": "parameter to specify the filter query parameter. currently supported search can handle following:\n- 'productOfferingId' with operator '=='\nNote:\n- in case of operation '==', comma separated multiple values can be passed.\n",
			"required": false,
			"type": "string"
		},
		"query-order": {
			"x-dox-Since": "v10.2",
			"name": "order",
			"in": "query",
			"description": "parameter to specify the order query parameter. Default value with be Desc. Currently supported search can handle following:\n- 'order' with operator '='\nNote:\n- in case of operation '=', comma separated multiple values can be passed.\n",
			"required": false,
			"type": "string"
		},
		"query-inventory-state": {
			"name": "inventoryState",
			"in": "query",
			"description": "The state to be set in Product Inventory domain for the Order Items that are set as Completed.<br> The supported values are - Created/Active\n",
			"required": true,
			"type": "string"
		},
		"query-state": {
			"x-dox-Since": "v10.2",
			"name": "state",
			"in": "query",
			"description": "parameter to specify the state query parameter. Currently supported search can handle following:\n- 'state' with operator '='\nNote:\n- Somehing.\n",
			"required": false,
			"type": "string"
		},
		"query-channel": {
			"x-dox-Since": "v10.2",
			"name": "channel",
			"in": "query",
			"description": "parameter to specify the channel query parameter. Currently supported search can handle following:\n- 'channel' with operator '='\nNote:\n- Something.\n",
			"required": false,
			"type": "string"
		},
		"query-relatedPartyID": {
			"name": "relatedPartyId",
			"in": "query",
			"description": "Related Party identifier\n",
			"required": false,
			"type": "string"
		},
		"query-role": {
			"name": "role",
			"in": "query",
			"description": "Role of the Related Party\n",
			"required": false,
			"type": "string"
		}
	},
	"definitions": {
		"ProductOrder": {
			"description": "Product order resource\n",
			"type": "object",
			"properties": {
				"id": {
					"description": "id of Product Order\n",
					"type": "string"
				},
				"href": {
					"description": "The self href for this product order.\n",
					"type": "string"
				},
				"category": {
					"description": "category of Product Order like \"Residential\", \"Business\" etc.\n",
					"type": "string"
				},
				"priority": {
					"description": "The priority of the product order\n",
					"type": "string"
				},
				"description": {
					"description": "The description of the product order\n",
					"type": "string"
				},
				"state": {
					"description": "Order state like \"Acknowledged\", 'Rejected\", \"Pending\", \"In Progress\",\n\"Held\" etc.\n",
					"type": "string"
				},
				"externalId": {
					"description": "External identification of product order, mainly provided by consumer\nto identify it in thier system.\n",
					"type": "string"
				},
				"orderDate": {
					"description": "Date when order was created\n",
					"type": "string",
					"format": "date-time"
				},
				"completionDate": {
					"description": "Date when order was completed\n",
					"type": "string",
					"format": "date-time"
				},
				"requestedStartDate": {
					"description": "Date when order was requested to be started\n",
					"type": "string",
					"format": "date-time"
				},
				"requestedCompletionDate": {
					"description": "Date when order was requested to be completed\n",
					"type": "string",
					"format": "date-time"
				},
				"expectedCompletionDate": {
					"description": "Date when order is expected to be completed\n",
					"type": "string",
					"format": "date-time"
				},
				"notificationContact": {
					"description": "The notificationContact\n",
					"type": "string"
				},
				"relatedParty": {
					"description": "A related party defines the party associated with the order.\n",
					"type": "array",
					"items": {
						"$ref": "#/definitions/RelatedPartyRef"
					}
				},
				"orderItem": {
					"description": "List of the active order items in the product order.\n",
					"type": "array",
					"items": {
						"$ref": "#/definitions/OrderItem"
					}
				},
				"orderTotalPrice": {
					"description": "Amount of the order, usually of money, that represents the price to be\npaid.\n",
					"type": "array",
					"items": {
						"$ref": "#/definitions/OrderPrice"
					}
				},
				"channel": {
					"description": "List of channels in the product order.\n",
					"type": "array",
					"items": {
						"$ref": "#/definitions/ChannelRef"
					}
				},
				"orderRelationship": {
					"description": "List of relations with other product orders.\n",
					"type": "array",
					"items": {
						"$ref": "#/definitions/OrderRelationship"
					}
				},
				"controlFields": {
					"$ref": "#/definitions/ControlFields"
				}
			}
		},
		"OrderItem": {
			"description": "Order item, A product order is decomposed into one or more order items.\n",
			"type": "object",
			"properties": {
				"id": {
					"description": "id of order item\n",
					"type": "string"
				},
				"action": {
					"description": "action done on item \"ADD\", \"REMOVE\", \"MODIFY\"\n",
					"type": "string"
				},
				"state": {
					"description": "The state of the OrderItem\n",
					"type": "string"
				},
				"quantity": {
					"description": "Quantity of item\n",
					"type": "integer"
				},
				"externalId": {
					"description": "The external Id\n",
					"type": "string"
				},
				"itemPrice": {
					"description": "Amount of the order item, usually of money, that represents the price\nto be paid.\n",
					"type": "array",
					"items": {
						"$ref": "#/definitions/OrderPrice"
					}
				},
				"itemTotalPrice": {
					"description": "Amount of the order item total prices, usually of money, that\nrepresents the price to be paid.\n",
					"type": "array",
					"items": {
						"$ref": "#/definitions/OrderPrice"
					}
				},
				"orderItemRelationship": {
					"description": "Relationship among the order items.\n",
					"type": "array",
					"items": {
						"$ref": "#/definitions/OrderItemRelationship"
					}
				},
				"productOffering": {
					"$ref": "#/definitions/ProductOfferingRef"
				},
				"product": {
					"$ref": "#/definitions/productRefOrValue"
				},
				"billingAccount": {
					"$ref": "#/definitions/BillingAccountRef"
				},
				"appointment": {
					"$ref": "#/definitions/AppointmentRef"
				},
				"orderItem": {
					"description": "The order items for the order item\n",
					"type": "array",
					"items": {
						"$ref": "#/definitions/OrderItem"
					}
				},
				"productOfferingGroupOption": {
					"$ref": "#/definitions/ProductOfferingGroupOption"
				},
				"orderTerm": {
					"description": "Comitmment term of order item\n",
					"type": "array",
					"items": {
						"$ref": "#/definitions/OrderTerm"
					}
				}
			}
		},
		"OrderItemRelationship": {
			"description": "Represent relationship amoung order items.\n",
			"type": "object",
			"properties": {
				"id": {
					"description": "Unique id of the referenced order item.\n",
					"type": "string"
				},
				"type": {
					"description": "Relationship type with the order item to which it is related to.\n",
					"type": "string"
				}
			}
		},
		"RelatedPartyRef": {
			"description": "Contains reference to the related party.\n",
			"type": "object",
			"properties": {
				"id": {
					"description": "Unique id of an existing party.\n",
					"type": "string"
				},
				"href": {
					"description": "The self href for the existing related party.\n",
					"type": "string"
				},
				"name": {
					"description": "The name of related party.\n",
					"type": "string"
				},
				"role": {
					"description": "The role of related party.\n",
					"type": "string"
				}
			}
		},
		"ProductOfferingRef": {
			"description": "Contains reference of the product offering.\n",
			"type": "object",
			"properties": {
				"id": {
					"description": "Unique id of the product offering.\n",
					"type": "string"
				},
				"name": {
					"description": "Name of the product offering.\n",
					"type": "string"
				},
				"href": {
					"description": "The self href for the product offering.\n",
					"type": "string"
				},
				"type": {
					"description": "The type for the product offering.\n",
					"type": "string"
				},
				"version": {
					"description": "The version of the product offering.\n",
					"type": "string"
				}
			}
		},
		"productRefOrValue": {
			"description": "Contains a reference to a product or the product values\n",
			"type": "object",
			"properties": {
				"id": {
					"description": "Unique id of the product offering.\n",
					"type": "string"
				},
				"href": {
					"description": "The self href for the product\n",
					"type": "string"
				},
				"name": {
					"description": "The name of the Product offering\n",
					"type": "string"
				},
				"state": {
					"description": "Represets the state of the Product in the Product Inventory domain\n",
					"type": "string",
					"readOnly": true
				},
				"relatedParty": {
					"description": "A related party defines the party associated with the product.\n",
					"type": "array",
					"items": {
						"$ref": "#/definitions/RelatedPartyRef"
					}
				},
				"productSpecification": {
					"description": "Product specification for the product.\n",
					"type": "array",
					"items": {
						"$ref": "#/definitions/ProductSpecificationRef"
					}
				},
				"characteristic": {
					"description": "The characteristics of this product.\n",
					"type": "array",
					"items": {
						"$ref": "#/definitions/ProductCharacteristic"
					}
				},
				"place": {
					"description": "The places of this product.\n",
					"type": "array",
					"items": {
						"$ref": "#/definitions/PlaceRef"
					}
				},
				"productRelationship": {
					"description": "The relationships of this product.\n",
					"type": "array",
					"items": {
						"$ref": "#/definitions/ProductRefOrValueRelationship"
					}
				},
				"referenceId": {
					"description": "The referenceId of the productRefOrValue\n",
					"type": "string"
				}
			}
		},
		"ProductOfferingGroupOption": {
			"description": "Contains reference of Product Offering Group Option from the Catalog\n",
			"type": "object",
			"properties": {
				"groupOptionId": {
					"description": "Unique id of the Product Offering Group Option at the Catalog.\n",
					"type": "string"
				}
			}
		},
		"ProductSpecificationRef": {
			"description": "Contains reference of Product Specification\n",
			"type": "object",
			"properties": {
				"id": {
					"description": "Unique id of the product specification.\n",
					"type": "string"
				},
				"href": {
					"description": "The unqiue href for the product specification.\n",
					"type": "string"
				},
				"name": {
					"description": "The name of the product specification.\n",
					"type": "string"
				},
				"type": {
					"description": "The type of the product specification.\n",
					"type": "string"
				}
			}
		},
		"ProductCharacteristic": {
			"description": "Product characteristic and it's currently selected value.\n",
			"type": "object",
			"properties": {
				"name": {
					"description": "The characteristic name.\n",
					"type": "string"
				},
				"value": {
					"description": "The characteristic value.\n",
					"type": "string"
				},
				"localizedName": {
					"description": "The localizedName value.\n",
					"type": "string"
				}
			}
		},
		"ChannelRef": {
			"description": "The channel of the product order\n",
			"type": "object",
			"properties": {
				"id": {
					"description": "The id of the channel.\n",
					"type": "string"
				},
				"href": {
					"description": "The link of the channel.\n",
					"type": "string"
				},
				"name": {
					"description": "The name of the channel.\n",
					"type": "string"
				}
			}
		},
		"PlaceRef": {
			"description": "The place of the product\n",
			"type": "object",
			"properties": {
				"id": {
					"description": "The id of the place.\n",
					"type": "string"
				},
				"href": {
					"description": "The href of the place.\n",
					"type": "string"
				},
				"name": {
					"description": "The name of the place.\n",
					"type": "string"
				},
				"role": {
					"description": "The role of the place.\n",
					"type": "string"
				}
			}
		},
		"ProductRefOrValueRelationship": {
			"description": "The relationship of the product\n",
			"type": "object",
			"properties": {
				"type": {
					"description": "The type of the relationship\n",
					"type": "string"
				},
				"product": {
					"$ref": "#/definitions/productRefOrValue"
				}
			}
		},
		"AppointmentRef": {
			"description": "The appointment of the order item\n",
			"type": "object",
			"properties": {
				"id": {
					"description": "The id of the appointment\n",
					"type": "string"
				},
				"href": {
					"description": "The href of the appointment\n",
					"type": "string"
				}
			}
		},
		"BillingAccountRef": {
			"description": "The billing account of the order item\n",
			"type": "object",
			"properties": {
				"id": {
					"description": "The id of the billing account\n",
					"type": "string"
				},
				"href": {
					"description": "The href of the billing account\n",
					"type": "string"
				},
				"name": {
					"description": "The name of the billing account\n",
					"type": "string"
				}
			}
		},
		"OrderPrice": {
			"description": "Total prices for the order and order items and indiviudal price of each\norder item.\n",
			"type": "object",
			"properties": {
				"id": {
					"description": "The identifier of the catalog price\n",
					"type": "string"
				},
				"name": {
					"description": "A short descriptive name such as 'Subscription price'\n",
					"type": "string"
				},
				"description": {
					"description": "A narrative that explains in detail the semantics of this entity\n(order/order item) price.\n",
					"type": "string"
				},
				"unitOfMeasure": {
					"description": "Applicable for PriceType allowance could be GB, Minutes etc.\n",
					"type": "string"
				},
				"recurringChargePeriod": {
					"description": "Applicate when priceType is recurring then reccurChargePeriod\nrepresents the recuring period.\n",
					"type": "string"
				},
				"priceType": {
					"description": "A category that describes the price charged for a order/order item.\n",
					"type": "string"
				},
				"price": {
					"$ref": "#/definitions/Price"
				},
				"priceAlteration": {
					"description": "The records if the price has been altered.\n",
					"type": "array",
					"items": {
						"$ref": "#/definitions/PriceAlteration"
					}
				},
				"billingAccount": {
					"$ref": "#/definitions/BillingAccountRef"
				}
			}
		},
		"PriceAlteration": {
			"description": "Total altered price for the order and order items and indiviudal price of\neach order item.\n",
			"type": "object",
			"properties": {
				"name": {
					"description": "A short descriptive name such as 'Subscription price'\n",
					"type": "string"
				},
				"description": {
					"description": "A narrative that explains in detail the semantics of this entity\n(order/order item) price.\n",
					"type": "string"
				},
				"unitOfMeasure": {
					"description": "Applicable for PriceType allowance could be GB, Minutes etc.\n",
					"type": "string"
				},
				"recurringChargePeriod": {
					"description": "Applicate when priceType is recurring then reccurChargePeriod\nrepresents the recuring period.\n",
					"type": "string"
				},
				"priceType": {
					"description": "A category that describes the price charged for a order/order item.\n",
					"type": "string"
				},
				"applicationDuration": {
					"description": "The duration\n",
					"type": "integer"
				},
				"priority": {
					"description": "The priority\n",
					"type": "integer"
				},
				"price": {
					"$ref": "#/definitions/Price"
				}
			}
		},
		"Price": {
			"description": "Is an amount, usually money.\n",
			"type": "object",
			"properties": {
				"taxIncludedAmount": {
					"x-dox-DesignDocs": "Amount including all application taxes\n",
					"$ref": "#/definitions/Money"
				},
				"dutyFreeAmount": {
					"x-dox-DesignDocs": "Amount excluding all application taxes\n",
					"$ref": "#/definitions/Money"
				},
				"taxRate": {
					"description": "The Tax rate by which is applied to the price\n",
					"type": "number"
				}
			}
		},
		"Money": {
			"type": "object",
			"properties": {
				"unit": {
					"type": "string"
				},
				"value": {
					"type": "number"
				}
			}
		},
		"ControlFields": {
			"description": "Information about who and when created/updated the product order\n",
			"type": "object",
			"properties": {
				"createdBy": {
					"type": "string"
				},
				"createdOn": {
					"type": "string",
					"format": "date-time"
				},
				"lastModifiedBy": {
					"type": "string"
				},
				"lastModifiedOn": {
					"type": "string",
					"format": "date-time"
				}
			}
		},
		"OrderTerm": {
			"type": "object",
			"properties": {
				"name": {
					"type": "string"
				},
				"type": {
					"type": "string"
				},
				"duration": {
					"$ref": "#/definitions/Quantity"
				}
			}
		},
		"Quantity": {
			"type": "object",
			"properties": {
				"amount": {
					"type": "integer"
				},
				"units": {
					"type": "string"
				}
			}
		},
		"ErrorResponse": {
			"properties": {
				"code": {
					"type": "string"
				},
				"message": {
					"type": "string"
				},
				"link": {
					"type": "string",
					"format": "url",
					"description": "The href to the item"
				},
				"rel": {
					"type": "string",
					"description": "The relation type for the item",
					"default": "help"
				},
				"traceId": {
					"description": "A unique tracker id used to facilitate troubleshooting"
				}
			}
		},
		"PatchElement": {
			"description": "The 'PatchElement' object\n",
			"properties": {
				"op": {
					"description": "The operation of this 'PatchElement', valid values are 'add' or\n'remove' or 'replace'\n",
					"type": "string"
				},
				"path": {
					"type": "string",
					"description": "The path of this 'PatchElement' (e.g. '/status' or '/notes' or '/name'\nor '/activationStatus' or '/description')\n"
				},
				"value": {
					"description": "The value of this 'PatchElement'\n",
					"type": "object"
				}
			}
		},
		"OrderBillingAccountRelation": {
			"description": "Request for Billing Account relation association on product order.\n",
			"type": "object",
			"properties": {
				"orderItem": {
					"description": "The Order Item that either getting Billing Account Association or holding Order price that gets the Billing Account association.\n",
					"type": "array",
					"items": {
						"$ref": "#/definitions/OrderItemBillingAccountRelation"
					}
				}
			}
		},
		"OrderItemBillingAccountRelation": {
			"description": "The Order Item that either getting Billing Account Association or holding Order price that gets the Billing Account association.\n",
			"type": "object",
			"properties": {
				"id": {
					"description": "The identifier of the Order Item\n",
					"type": "string"
				},
				"action": {
					"description": "The requested action (add/replace/remove) for a Billing Account Ref entity\n",
					"type": "string"
				},
				"billingAccount": {
					"$ref": "#/definitions/BillingAccountRef"
				},
				"itemPrice": {
					"description": "Order price that gets the Billing Account association.\n",
					"type": "array",
					"items": {
						"$ref": "#/definitions/OrderPriceBillingAccountRelation"
					}
				}
			}
		},
		"OrderPriceBillingAccountRelation": {
			"description": "The Order price that gets the Billing Account association.\n",
			"type": "object",
			"properties": {
				"id": {
					"description": "The identifier of the Order Price\n",
					"type": "string"
				},
				"action": {
					"description": "The requested action (add/replace/remove) for a Billing Account Ref entity\n",
					"type": "string"
				},
				"billingAccount": {
					"$ref": "#/definitions/BillingAccountRef"
				}
			}
		},
		"OrderRelationship": {
			"type": "object",
			"properties": {
				"id": {
					"description": "Unique id of the related Product Order.\n",
					"type": "string"
				},
				"href": {
					"description": "The unqiue href for the related product Order.\n",
					"type": "string"
				},
				"type": {
					"description": "The type of relation that relates the remote Product Order.\n",
					"type": "string"
				}
			}
		}
	},
	"responses": {
		"400-BadRequest": {
			"description": "*Bad Request* - Indicates that client has sent malformed request.\nPossibly missing mandatory query parameters, invalid value\nin query parameters, validation exception etc.\n",
			"schema": {
				"$ref": "#/definitions/ErrorResponse"
			}
		},
		"404-NotFound": {
			"description": "*Not Found* - Indicates server has not found the requested URI.\nPossibly missing path parameters, invalid web resource etc.\n",
			"schema": {
				"$ref": "#/definitions/ErrorResponse"
			}
		},
		"409-Conflict": {
			"description": "*Conflict* - The request could not be completed due to a conflict \nwith the current state of the resource.\n",
			"schema": {
				"$ref": "#/definitions/ErrorResponse"
			}
		},
		"412-PreconditionFailed": {
			"description": "*Precondition Failed* - The request could not be completed due to a pre condition validation failure of the resource.\n",
			"schema": {
				"$ref": "#/definitions/ErrorResponse"
			}
		},
		"500-InternalServerError": {
			"description": "*Internal Server Error* - server failed in handling the\nclient request.\n",
			"schema": {
				"$ref": "#/definitions/ErrorResponse"
			}
		},
		"502-BadGateway": {
			"description": "*Bad Gateway* - Error when calling another service.\n",
			"schema": {
				"$ref": "#/definitions/ErrorResponse"
			}
		}
	}
}