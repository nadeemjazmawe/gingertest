name: Ginger Windows Build

on:
  pull_request:
    branches: 
      - master
      - Features/Linux-Migration
      - Releases/*
      - Releases/*/*
      
  workflow_dispatch: 

jobs:
  build:

    runs-on: windows-latest
    
    env:
      BUILD_CONFIGURATION: Release
      
    steps:
      - uses: actions/checkout@v3

# ------------------------------------------------------------------------------------------------------
# Install .Net core SDK 6.0.301
# ------------------------------------------------------------------------------------------------------
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 6.0.301
          
# ------------------------------------------------------------------------------------------------------
# Install Nuget tool v1.0.5
# ------------------------------------------------------------------------------------------------------
      - name: Setup Nuget
        uses: Nuget/setup-nuget@v1.0.5

# ------------------------------------------------------------------------------------------------------
# Restore Ginger solution NuGet packages
# ------------------------------------------------------------------------------------------------------
      - name: Restore nuget packages
        run: nuget restore ./Ginger/Ginger.sln



# ------------------------------------------------------------------------------------------------------
# SeaLight - Downloading the .NET agent files && Scanning a build using MSBuild
# ---------------------------------------------------------------------------------------------------
      - name: Download Sealights .Net agent 
        env:
        
          SLDOMAIN: amdocs.sealights.co
          APP_NAME: Ginger
          APP_NAMESPACE: Amdocs.*,ginger.*
          PR_NUMBER: ${{github.event.pull_request.number}}
          PR_TARGET_BRANCH: ${{github.head_ref}}
          PR_LAST_COMMIT: ${{ github.event.pull_request.head.sha }}
          REPO_URL: ${{github.repositoryUrl	}}
          
        run: |
          Write-Output "Build Reason =  ${{github.event_name}}"
          echo $SLDOMAIN
          $slagenttoken= "eyJhbGciOiJSUzUxMiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJodHRwczovL1BST0QtQ1VTVE9NRVJTMi5hdXRoLnNlYWxpZ2h0cy5pby8iLCJqd3RpZCI6IlBST0QtQ1VTVE9NRVJTMixpLTA0NzIzMTI0MjU2NTg5OTM4LEFQSUdXLTU0ZGRjYjgyLTM4ZDMtNDRkMC04OGI3LTVhMThkZTliZDNhNSwxNjEyNzgwMzY3NjA1Iiwic3ViamVjdCI6ImFtZG9jc0BhZ2VudCIsImF1ZGllbmNlIjpbImFnZW50cyJdLCJ4LXNsLXJvbGUiOiJhZ2VudCIsIngtc2wtc2VydmVyIjoiaHR0cHM6Ly9hbWRvY3Muc2VhbGlnaHRzLmNvL2FwaSIsInNsX2ltcGVyX3N1YmplY3QiOiIiLCJpYXQiOjE2MTI3ODAzNjd9.AISEOpET7FyCSnchXkjMm-aCC3A91bV9myXs7SFu_fMKIJfQzH3maYs9_6rZQTVKoX9SnqMkdUz4lm8RpTx4vOcFutyOyHrFo8hNKFqJEpG87T07y93QTl2coKz2x_4-IOu5i_lxDg_RPpLJkClMD2nyN8DwXYW_0w_3C-JS9asPFDjDAjEEQJDA8oMbstVAm72uaEyS2xVuBYJLuXVP-A47t-nREGuiWKc0Zpq64RMT85Jla7IJdnn6-GFtvGeLQN2INz3RrbjAHS1pWgAm83S--chp8izHQ85BU4reYtyNXa_v8eaidc3x8fjTAwp8_DGbw1hgKETf_znzeWpSeYO5TREHUxLOTY7qtkDBhlspA-ztUI8wewJerykCf_h9Pbdd_olLs0DQgotYgfxYKwDCm2xxpcfOdzxAcPDSA8bE0o_HZJNDfyXdwe9xMco4NGwcfMZUU5mS_cOQ1snBajHPoAxzZbPEb9uN8iAiO1s5jiUuNH4GyLe7hRrC6YAR1zQUhuZ-2iZ7rLJKoOfYOKhTR71wQPOflna-xGnc7hrhTUlA2nAe2Wdzmx-yx-n0lHicywq57m2j2yCLLjdRyfbW-TLqUh7jga34mxMse-zAyIwSfevZ0u8ng8Wm6QsX4A-W26obXHAjdSZcXLoHgzoTN_MVwvA3uUA-QrD_fNg"

          Write-Output "Token $($SLAGENTTOKEN.SubString($SLAGENTTOKEN.Length-5))"
          [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
          Write-Output "Download the Sealights DotNet agent version set in settings..." 
          $agentversion = ((iwr -Uri https://amdocs.sealights.co/api/v2/agents/dotnet/recommended -Headers @{'Accept' = 'application/json'; 'Authorization' = "Bearer $($slagenttoken)"}).Content | ConvertFrom-Json | Select-Object agent).agent.version
          iwr -OutFile sealights-dotnet-agent.zip -Uri http://agents.sealights.co/SL.DotNet/SL.DotNet-$($agentversion).zip
          Expand-Archive .\sealights-dotnet-agent.zip -DestinationPath SL.DotNet -Force
          Write-Output "Sealights agent version used is:$(Get-Content .\SL.DotNet\version.txt)"
          #Retrieve the same name of target branch as reported in Sealights Dashboard by removing the uncecessary prefix


          Write-Output "Print ***"

          dir
          
          
          Write-Output "`n*** Create PR BSID ***"
          D:\a\gingertest\gingertest\SL.DotNet\x64\SL.DotNet.exe prConfig --appName $APP_NAME --pullRequestNumber $PR_NUMBER --targetBranch $PR_TARGET_BRANCH --latestCommit $PR_LAST_COMMIT --repositoryUrl $REPO_URL --includeNamespace $APP_NAMESPACE --buildSessionId 1673245202505 --token $($slagenttoken) --logEnabled true --logAppendConsole true --ignoreCertificateErrors true
          
          Write-Output "Print ***"

          dir

          Write-Output "`n*** Prepare for MSBuild ***"
          .\SL.DotNet\x64\SL.DotNet.exe prepareForMsBuild --buildSessionId 1673245202505 --workspacePath .\Ginger --baseDir . --ignoreGeneratedCode true --debugMode true --logEnabled true --logAppendConsole true --ignoreCertificateErrors true --token $($slagenttoken) --scm git --scmProvider vsts

          Write-output "Fuck you!!"
          .\SL-dotnet-2.0.1.810\x64\SL.DotNet.exe startExecution --buildSessionId 1673245202505 --token $($slagenttoken) --logEnabled true --logAppendConsole true --testStage "Unit Tests"




# ------------------------------------------------------------------------------------------------------
# Install msbild && Build Ginger Solution
# ------------------------------------------------------------------------------------------------------
      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.0.2


      - name: Build Ginger Solution
        run: msbuild ./Ginger/Ginger.sln /p:DebugSymbols=true /p:DebugType=full /p:Configuration=Release
        
        
# ------------------------------------------------------------------------------------------------------
# SeaLights- Starting test stage && Starting Background test listener
# ------------------------------------------------------------------------------------------------------

      - name: Starting test stage
#         run: .\SL.DotNet\x64\SL.DotNet.exe startExecution --buildSessionId 1637907553052 --testStage "Functional Tests"
        run: |
          $slagenttoken= "eyJhbGciOiJSUzUxMiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJodHRwczovL1BST0QtQ1VTVE9NRVJTMi5hdXRoLnNlYWxpZ2h0cy5pby8iLCJqd3RpZCI6IlBST0QtQ1VTVE9NRVJTMixpLTA0NzIzMTI0MjU2NTg5OTM4LEFQSUdXLTU0ZGRjYjgyLTM4ZDMtNDRkMC04OGI3LTVhMThkZTliZDNhNSwxNjEyNzgwMzY3NjA1Iiwic3ViamVjdCI6ImFtZG9jc0BhZ2VudCIsImF1ZGllbmNlIjpbImFnZW50cyJdLCJ4LXNsLXJvbGUiOiJhZ2VudCIsIngtc2wtc2VydmVyIjoiaHR0cHM6Ly9hbWRvY3Muc2VhbGlnaHRzLmNvL2FwaSIsInNsX2ltcGVyX3N1YmplY3QiOiIiLCJpYXQiOjE2MTI3ODAzNjd9.AISEOpET7FyCSnchXkjMm-aCC3A91bV9myXs7SFu_fMKIJfQzH3maYs9_6rZQTVKoX9SnqMkdUz4lm8RpTx4vOcFutyOyHrFo8hNKFqJEpG87T07y93QTl2coKz2x_4-IOu5i_lxDg_RPpLJkClMD2nyN8DwXYW_0w_3C-JS9asPFDjDAjEEQJDA8oMbstVAm72uaEyS2xVuBYJLuXVP-A47t-nREGuiWKc0Zpq64RMT85Jla7IJdnn6-GFtvGeLQN2INz3RrbjAHS1pWgAm83S--chp8izHQ85BU4reYtyNXa_v8eaidc3x8fjTAwp8_DGbw1hgKETf_znzeWpSeYO5TREHUxLOTY7qtkDBhlspA-ztUI8wewJerykCf_h9Pbdd_olLs0DQgotYgfxYKwDCm2xxpcfOdzxAcPDSA8bE0o_HZJNDfyXdwe9xMco4NGwcfMZUU5mS_cOQ1snBajHPoAxzZbPEb9uN8iAiO1s5jiUuNH4GyLe7hRrC6YAR1zQUhuZ-2iZ7rLJKoOfYOKhTR71wQPOflna-xGnc7hrhTUlA2nAe2Wdzmx-yx-n0lHicywq57m2j2yCLLjdRyfbW-TLqUh7jga34mxMse-zAyIwSfevZ0u8ng8Wm6QsX4A-W26obXHAjdSZcXLoHgzoTN_MVwvA3uUA-QrD_fNg"
          dir
          .\SL-dotnet-2.0.1.810\x64\SL.DotNet.exe startExecution --buildSessionId 1673245202505 --token $($slagenttoken) --logEnabled true --logAppendConsole true --testStage "Unit Tests"
          dir
          
      - name: Starting Background test listener
        if: success() || failure() 
        run: |
          dir
          .\SL.DotNet\x64\SL.DotNet.exe startBackgroundTestListener --token $($slagenttoken) --buildSessionId 1673245202505 --logEnabled true --logAppendConsole true --testListenerSessionKey 1673245202505 --testStage "Unit Tests"
          dir

        
# ------------------------------------------------------------------------------------------------------
# Start Testing 
# ------------------------------------------------------------------------------------------------------
      - name: Testing GingerUtilsTest
        if: success() || failure() 
        run: dotnet test  Ginger/GingerUtilsTest --configuration Release --logger trx --verbosity=normal

      - name: 'Testing GingerCoreCommonTest'
        if: success() || failure()  
        run: dotnet test  Ginger/GingerCoreCommonTest --configuration Release --logger trx --verbosity=normal

        # for GingerCoreNET we use run setting to limit to have one worker thread due to workspace limitation
      - name: 'Testing GingerCoreNETUnitTest'
        if: success() || failure()  
        run: dotnet test  Ginger/GingerCoreNETUnitTest --configuration Release --logger trx --verbosity=normal

      - name: 'Testing GingerPluginCoreTest'
        if: success() || failure()  
        run: dotnet test  Ginger/GingerPluginCoreTest --configuration Release --logger trx --verbosity=normal

      - name: 'Testing GingerConsoleTest'
        if: success() || failure()  
        run: dotnet test  Ginger/GingerConsoleTest --configuration Release --logger trx --verbosity=normal

      - name: 'Testing GingerAutoPilotTest'
        if: success() || failure()  
        run: dotnet test  Ginger/GingerAutoPilotTest --configuration Release --logger trx --verbosity=normal     
              
        
# ------------------------------------------------------------------------------------------------------
# Run .Net Framework tests using powershell and publish the results
# ------------------------------------------------------------------------------------------------------

      - name: Run tests for Ginger .NetFramework *Test Dlls
        if: success() || failure()        # run this step even if previous step failed
        run: powershell -file "TestDotNetFramework.ps1"
      
# ------------------------------------------------------------------------------------------------------
# Publish Test Results
# ------------------------------------------------------------------------------------------------------
      - name: Test Report
        uses: dorny/test-reporter@v1
        if: success() || failure()        # run this step even if previous step failed
        with:
          name: Ginger Windows UnitTests    # Name of the check run which will be created
          path: "**/*.trx"                # Path to test results
          reporter: dotnet-trx            # Format of test results
          
          
# ------------------------------------------------------------------------------------------------------
# Sealight - Stop Background test listener && Ending a test stage && Upload report files
# ------------------------------------------------------------------------------------------------------        
#       - task: EndTestExecution@2
#         inputs:
#           sealightsToken: "$(SLAGENTTOKEN)"
#           SealightsBuildSessionId : $(Build.ArtifactStagingDirectory)\SealightsBuildSessionId.txt 
#       - name: Test Report
#         run: Msbuild SlnFolders.sln /t:rebuild
      - name: EndTestExecution
        run: |
          D:\a\SL-dotnet-2.0.1.810\x64\SL.DotNet.exe stopBackgroundTestListener --token $($slagenttoken) --buildSessionId 1673245202505 --logEnabled true --logAppendConsole true --testListenerSessionKey 1673245202505
          D:\a\SL-dotnet-2.0.1.810\x64\SL.DotNet.exe endExecution --token $($slagenttoken) --buildSessionId 1673245202505 --logEnabled true --logAppendConsole true --testStage "Unit Tests"
          D:\a\SL-dotnet-2.0.1.810\x64\SL.DotNet.exe uploadTestReport --token $($slagenttoken) --buildSessionId 1673245202505 --logEnabled true --logAppendConsole true --testStage "Unit Tests" 
          D:\a\SL-dotnet-2.0.1.810\x64\SL.DotNet.exe uploadTestReport --token $($slagenttoken) --buildSessionId 1673245202505 --logEnabled true --logAppendConsole true --testStage "Unit Tests" 




          
          
